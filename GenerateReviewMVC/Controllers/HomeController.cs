using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using Markov;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using GenerateReviewMVC.Models;

namespace GenerateReviewMVC.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IWebHostEnvironment _hostingEnvironment;
        private List<Review> _reviews;

        /// <summary>
        /// Constructor for the HomeController.
        /// </summary>
        public HomeController(ILogger<HomeController> logger, IWebHostEnvironment hostingEnvironment)
        {
            _logger = logger;
            _hostingEnvironment = hostingEnvironment;
            _reviews = new List<Review>();
        }

        /// <summary>
        /// Main index method. Returns the Home view.
        /// </summary>
        public IActionResult Index()
        {
            return View();
        }

        /// <summary>
        /// Returns the Error view.
        /// </summary>
        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

        /// <summary>
        /// Returns the View with an an auto generated review object including a randomized star rating between 1 and 5.
        /// </summary>
        [HttpGet]
        public IActionResult Generate(string name)
        {
            FileReader();
            return View("Index", BuildReview(name));
        }

        /// <summary>
        /// Reads and deserializes the source file into a List<Reivew>.
        /// </summary>
        private void FileReader()
        {
            string path = Path.Combine(_hostingEnvironment.WebRootPath, "VideoGameReviews.json");
            if (path != null)
            {
                using var reader = new StreamReader(path);
                string line = null;
                while ((line = reader.ReadLine()) != null)
                {
                    if (!string.IsNullOrEmpty(line))
                    {
                        _reviews.Add(JsonConvert.DeserializeObject<Review>(line));
                    }
                }
            }
        }

        /// <summary>
        /// Uses data and a set of Markov Chains to build and return an auto generated Review object.
        /// </summary>
        private Review BuildReview(string name)
        {
            // Create a set of Markov Chain instances
            var overallChain = new MarkovChain<string>(1);
            var reviewTimeChain = new MarkovChain<string>(1);
            var reviewerIDChain = new MarkovChain<string>(1);
            var asinChain = new MarkovChain<string>(1);
            var reviewerNameChain = new MarkovChain<string>(1);
            var reviewTextChain = new MarkovChain<string>(1);
            var summaryChain = new MarkovChain<string>(1);

            // Add data to the chains
            foreach (var review in _reviews)
            {
                if (review != null &&
                    review.Overall != null &&
                    review.ReviewTime != null &&
                    review.ReviewerID != null &&
                    review.ASIN != null &&
                    review.ReviewerName != null &&
                    review.ReviewText != null &&
                    review.Summary != null)
                {
                    overallChain.Add(review.Overall.Split(" "), 1);
                    reviewTimeChain.Add(review.ReviewTime.Split(" "), 1);
                    reviewerIDChain.Add(review.ReviewerID.Split(" "), 1);
                    asinChain.Add(review.ASIN.Split(" "), 1);
                    reviewerNameChain.Add(review.ReviewerName.Split(" "), 1);
                    reviewTextChain.Add(review.ReviewText.Split(" "), 1);
                    summaryChain.Add(review.Summary.Split(" "), 1);
                }
            }

            // Create an automatically generated Review object 
            Review AutoGeneratedReview = new Review
            {
                Overall = string.Join(" ", overallChain.Chain(new Random())),
                Verified = new Random().Next(100) < 50,
                ReviewTime = string.Join(" ", reviewTimeChain.Chain(new Random())),
                ReviewerID = string.Join(" ", reviewerIDChain.Chain(new Random())),
                ASIN = string.Join(" ", asinChain.Chain(new Random())),
                ReviewerName = string.Join(" ", reviewerNameChain.Chain(new Random())),
                ReviewText = string.Join(" ", reviewTextChain.Chain(new Random())),
                Summary = string.Join(" ", summaryChain.Chain(new Random())),
                Name = name ?? "Super Mario Brothers",
                StarRating = new Random().Next(1, 6)
            };

            return AutoGeneratedReview;
        }
    }
}
